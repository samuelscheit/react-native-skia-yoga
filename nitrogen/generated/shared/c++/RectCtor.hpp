///
/// RectCtor.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::RNSkiaYoga {

  /**
   * A struct which can be represented as a JavaScript object (RectCtor).
   */
  struct RectCtor {
  public:
    std::optional<double> x     SWIFT_PRIVATE;
    std::optional<double> y     SWIFT_PRIVATE;
    double width     SWIFT_PRIVATE;
    double height     SWIFT_PRIVATE;

  public:
    RectCtor() = default;
    explicit RectCtor(std::optional<double> x, std::optional<double> y, double width, double height): x(x), y(y), width(width), height(height) {}
  };

} // namespace margelo::nitro::RNSkiaYoga

namespace margelo::nitro {

  // C++ RectCtor <> JS RectCtor (object)
  template <>
  struct JSIConverter<margelo::nitro::RNSkiaYoga::RectCtor> final {
    static inline margelo::nitro::RNSkiaYoga::RectCtor fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::RNSkiaYoga::RectCtor(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "x")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "y")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "width")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "height"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::RNSkiaYoga::RectCtor& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "x", JSIConverter<std::optional<double>>::toJSI(runtime, arg.x));
      obj.setProperty(runtime, "y", JSIConverter<std::optional<double>>::toJSI(runtime, arg.y));
      obj.setProperty(runtime, "width", JSIConverter<double>::toJSI(runtime, arg.width));
      obj.setProperty(runtime, "height", JSIConverter<double>::toJSI(runtime, arg.height));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "x"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "y"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "width"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "height"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
