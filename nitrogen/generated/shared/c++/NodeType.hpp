///
/// NodeType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::RNSkiaYoga {

  /**
   * An enum which can be represented as a JavaScript union (NodeType).
   */
  enum class NodeType {
    RECT      SWIFT_NAME(rect) = 0,
    RRECT      SWIFT_NAME(rrect) = 1,
    TEXT      SWIFT_NAME(text) = 2,
    GROUP      SWIFT_NAME(group) = 3,
    BLURMASKFILTER      SWIFT_NAME(blurmaskfilter) = 4,
    IMAGE      SWIFT_NAME(image) = 5,
    PATH      SWIFT_NAME(path) = 6,
    PARAGRAPH      SWIFT_NAME(paragraph) = 7,
    CIRCLE      SWIFT_NAME(circle) = 8,
    LINE      SWIFT_NAME(line) = 9,
    OVAL      SWIFT_NAME(oval) = 10,
    POINTS      SWIFT_NAME(points) = 11,
    PATCH      SWIFT_NAME(patch) = 12,
    VERTICES      SWIFT_NAME(vertices) = 13,
    PICTURE      SWIFT_NAME(picture) = 14,
    SVG      SWIFT_NAME(svg) = 15,
  } CLOSED_ENUM;

} // namespace margelo::nitro::RNSkiaYoga

namespace margelo::nitro {

  // C++ NodeType <> JS NodeType (union)
  template <>
  struct JSIConverter<margelo::nitro::RNSkiaYoga::NodeType> final {
    static inline margelo::nitro::RNSkiaYoga::NodeType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("rect"): return margelo::nitro::RNSkiaYoga::NodeType::RECT;
        case hashString("rrect"): return margelo::nitro::RNSkiaYoga::NodeType::RRECT;
        case hashString("text"): return margelo::nitro::RNSkiaYoga::NodeType::TEXT;
        case hashString("group"): return margelo::nitro::RNSkiaYoga::NodeType::GROUP;
        case hashString("blurMaskFilter"): return margelo::nitro::RNSkiaYoga::NodeType::BLURMASKFILTER;
        case hashString("image"): return margelo::nitro::RNSkiaYoga::NodeType::IMAGE;
        case hashString("path"): return margelo::nitro::RNSkiaYoga::NodeType::PATH;
        case hashString("paragraph"): return margelo::nitro::RNSkiaYoga::NodeType::PARAGRAPH;
        case hashString("circle"): return margelo::nitro::RNSkiaYoga::NodeType::CIRCLE;
        case hashString("line"): return margelo::nitro::RNSkiaYoga::NodeType::LINE;
        case hashString("oval"): return margelo::nitro::RNSkiaYoga::NodeType::OVAL;
        case hashString("points"): return margelo::nitro::RNSkiaYoga::NodeType::POINTS;
        case hashString("patch"): return margelo::nitro::RNSkiaYoga::NodeType::PATCH;
        case hashString("vertices"): return margelo::nitro::RNSkiaYoga::NodeType::VERTICES;
        case hashString("picture"): return margelo::nitro::RNSkiaYoga::NodeType::PICTURE;
        case hashString("svg"): return margelo::nitro::RNSkiaYoga::NodeType::SVG;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum NodeType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::RNSkiaYoga::NodeType arg) {
      switch (arg) {
        case margelo::nitro::RNSkiaYoga::NodeType::RECT: return JSIConverter<std::string>::toJSI(runtime, "rect");
        case margelo::nitro::RNSkiaYoga::NodeType::RRECT: return JSIConverter<std::string>::toJSI(runtime, "rrect");
        case margelo::nitro::RNSkiaYoga::NodeType::TEXT: return JSIConverter<std::string>::toJSI(runtime, "text");
        case margelo::nitro::RNSkiaYoga::NodeType::GROUP: return JSIConverter<std::string>::toJSI(runtime, "group");
        case margelo::nitro::RNSkiaYoga::NodeType::BLURMASKFILTER: return JSIConverter<std::string>::toJSI(runtime, "blurMaskFilter");
        case margelo::nitro::RNSkiaYoga::NodeType::IMAGE: return JSIConverter<std::string>::toJSI(runtime, "image");
        case margelo::nitro::RNSkiaYoga::NodeType::PATH: return JSIConverter<std::string>::toJSI(runtime, "path");
        case margelo::nitro::RNSkiaYoga::NodeType::PARAGRAPH: return JSIConverter<std::string>::toJSI(runtime, "paragraph");
        case margelo::nitro::RNSkiaYoga::NodeType::CIRCLE: return JSIConverter<std::string>::toJSI(runtime, "circle");
        case margelo::nitro::RNSkiaYoga::NodeType::LINE: return JSIConverter<std::string>::toJSI(runtime, "line");
        case margelo::nitro::RNSkiaYoga::NodeType::OVAL: return JSIConverter<std::string>::toJSI(runtime, "oval");
        case margelo::nitro::RNSkiaYoga::NodeType::POINTS: return JSIConverter<std::string>::toJSI(runtime, "points");
        case margelo::nitro::RNSkiaYoga::NodeType::PATCH: return JSIConverter<std::string>::toJSI(runtime, "patch");
        case margelo::nitro::RNSkiaYoga::NodeType::VERTICES: return JSIConverter<std::string>::toJSI(runtime, "vertices");
        case margelo::nitro::RNSkiaYoga::NodeType::PICTURE: return JSIConverter<std::string>::toJSI(runtime, "picture");
        case margelo::nitro::RNSkiaYoga::NodeType::SVG: return JSIConverter<std::string>::toJSI(runtime, "svg");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert NodeType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("rect"):
        case hashString("rrect"):
        case hashString("text"):
        case hashString("group"):
        case hashString("blurMaskFilter"):
        case hashString("image"):
        case hashString("path"):
        case hashString("paragraph"):
        case hashString("circle"):
        case hashString("line"):
        case hashString("oval"):
        case hashString("points"):
        case hashString("patch"):
        case hashString("vertices"):
        case hashString("picture"):
        case hashString("svg"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
