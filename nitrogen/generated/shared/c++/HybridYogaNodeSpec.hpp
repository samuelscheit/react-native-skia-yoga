///
/// HybridYogaNodeSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `YogaNodeLayout` to properly resolve imports.
namespace margelo::nitro::RNSkiaYoga { struct YogaNodeLayout; }
// Forward declaration of `HybridYogaNodeSpec` to properly resolve imports.
namespace margelo::nitro::RNSkiaYoga { class HybridYogaNodeSpec; }
// Forward declaration of `NodeStyle` to properly resolve imports.
namespace margelo::nitro::RNSkiaYoga { struct NodeStyle; }
// Forward declaration of `NodeType` to properly resolve imports.
namespace margelo::nitro::RNSkiaYoga { enum class NodeType; }

#include "YogaNodeLayout.hpp"
#include <memory>
#include "HybridYogaNodeSpec.hpp"
#include <vector>
#include "NodeStyle.hpp"
#include "NodeType.hpp"
#include <variant>
#include <optional>

namespace margelo::nitro::RNSkiaYoga {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `YogaNode`
   * Inherit this class to create instances of `HybridYogaNodeSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridYogaNode: public HybridYogaNodeSpec {
   * public:
   *   HybridYogaNode(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridYogaNodeSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridYogaNodeSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridYogaNodeSpec() override = default;

    public:
      // Properties
      virtual YogaNodeLayout getLayout() = 0;
      virtual void setLayout(const YogaNodeLayout& layout) = 0;
      virtual std::vector<std::shared_ptr<HybridYogaNodeSpec>> getChildren() = 0;
      virtual void setChildren(const std::vector<std::shared_ptr<HybridYogaNodeSpec>>& children) = 0;

    public:
      // Methods
      virtual void setStyle(const NodeStyle& style) = 0;
      virtual void setType(NodeType type) = 0;
      virtual void insertChild(const std::shared_ptr<HybridYogaNodeSpec>& child, const std::optional<std::variant<double, std::shared_ptr<HybridYogaNodeSpec>>>& index) = 0;
      virtual void removeChild(const std::shared_ptr<HybridYogaNodeSpec>& child) = 0;
      virtual void removeAllChildren() = 0;
      virtual void computeLayout(std::optional<double> width, std::optional<double> height) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "YogaNode";
  };

} // namespace margelo::nitro::RNSkiaYoga
