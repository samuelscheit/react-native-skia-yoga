///
/// BlendMode.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::RNSkiaYoga {

  /**
   * An enum which can be represented as a JavaScript enum (BlendMode).
   */
  enum class BlendMode {
    CLEAR      SWIFT_NAME(clear) = 0,
    SRC      SWIFT_NAME(src) = 1,
    DST      SWIFT_NAME(dst) = 2,
    SRCOVER      SWIFT_NAME(srcover) = 3,
    DSTOVER      SWIFT_NAME(dstover) = 4,
    SRCIN      SWIFT_NAME(srcin) = 5,
    DSTIN      SWIFT_NAME(dstin) = 6,
    SRCOUT      SWIFT_NAME(srcout) = 7,
    DSTOUT      SWIFT_NAME(dstout) = 8,
    SRCATOP      SWIFT_NAME(srcatop) = 9,
    DSTATOP      SWIFT_NAME(dstatop) = 10,
    XOR      SWIFT_NAME(xor) = 11,
    PLUS      SWIFT_NAME(plus) = 12,
    MODULATE      SWIFT_NAME(modulate) = 13,
    SCREEN      SWIFT_NAME(screen) = 14,
    OVERLAY      SWIFT_NAME(overlay) = 15,
    DARKEN      SWIFT_NAME(darken) = 16,
    LIGHTEN      SWIFT_NAME(lighten) = 17,
    COLORDODGE      SWIFT_NAME(colordodge) = 18,
    COLORBURN      SWIFT_NAME(colorburn) = 19,
    HARDLIGHT      SWIFT_NAME(hardlight) = 20,
    SOFTLIGHT      SWIFT_NAME(softlight) = 21,
    DIFFERENCE      SWIFT_NAME(difference) = 22,
    EXCLUSION      SWIFT_NAME(exclusion) = 23,
    MULTIPLY      SWIFT_NAME(multiply) = 24,
    HUE      SWIFT_NAME(hue) = 25,
    SATURATION      SWIFT_NAME(saturation) = 26,
    COLOR      SWIFT_NAME(color) = 27,
    LUMINOSITY      SWIFT_NAME(luminosity) = 28,
  } CLOSED_ENUM;

} // namespace margelo::nitro::RNSkiaYoga

namespace margelo::nitro {

  // C++ BlendMode <> JS BlendMode (enum)
  template <>
  struct JSIConverter<margelo::nitro::RNSkiaYoga::BlendMode> final {
    static inline margelo::nitro::RNSkiaYoga::BlendMode fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<margelo::nitro::RNSkiaYoga::BlendMode>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::RNSkiaYoga::BlendMode arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double number = value.getNumber();
      int integer = static_cast<int>(number);
      if (number != integer) {
        // The integer is not the same value as the double - we truncated floating points.
        // Enums are all integers, so the input floating point number is obviously invalid.
        return false;
      }
      // Check if we are within the bounds of the enum.
      return integer >= 0 && integer <= 28;
    }
  };

} // namespace margelo::nitro
