#include <jni.h>

#include <functional>
#include <memory>
#include <stdexcept>
#include <utility>

#include <ReactCommon/CallInvokerHolder.h>
#include <ReactCommon/RuntimeExecutor.h>
#include <fbjni/fbjni.h>
#include <jsi/jsi.h>
#include <react/jni/JRuntimeExecutor.h>

#include "RuntimeAwareCache.h"
#include "PlatformContextAccessor.hpp"

#include "JniPlatformContext.h"
#include "RNSkAndroidPlatformContext.h"

#include <worklets/Tools/UIScheduler.h>

// Note: Registration is handled by autogenerated RNSkiaYogaOnLoad.cpp

#ifndef REACT_NATIVE_VERSION
#define REACT_NATIVE_VERSION 0
#endif

using namespace facebook;

namespace margelo::nitro::RNSkiaYoga {

namespace {

using CallFunc = std::function<void(jsi::Runtime&)>;

class BridgelessJSCallInvoker : public react::CallInvoker {
 public:
  explicit BridgelessJSCallInvoker(react::RuntimeExecutor runtimeExecutor)
      : runtimeExecutor_(std::move(runtimeExecutor)) {}

  void invokeAsync(CallFunc &&func) noexcept override {
    runtimeExecutor_([func = std::move(func)](jsi::Runtime &runtime) {
      func(runtime);
    });
  }

  void invokeSync(CallFunc &&func) override {
    throw std::runtime_error(
        "Synchronous native -> JS calls are currently not supported.");
  }

 private:
  react::RuntimeExecutor runtimeExecutor_;
};

inline std::shared_ptr<react::CallInvoker> getCallInvoker(
    JNIEnv *env,
    jobject jCallInvokerHolder,
    jobject jRuntimeExecutor) {
  if (jCallInvokerHolder != nullptr) {
    auto holder = jni::make_local(
        reinterpret_cast<react::CallInvokerHolder::javaobject>(
                 jCallInvokerHolder));
    if (holder) {
      auto sharedInvoker = holder->cthis()->getCallInvoker();
      if (sharedInvoker) {
        return sharedInvoker;
      }
    }
  }

  if (jRuntimeExecutor != nullptr) {
    auto runtimeExecutor = jni::make_local(
        reinterpret_cast<react::JRuntimeExecutor::javaobject>(
                 jRuntimeExecutor));
    if (runtimeExecutor) {
      return std::make_shared<BridgelessJSCallInvoker>(
          runtimeExecutor->cthis()->get());
    }
  }

  return nullptr;
}

} // namespace

extern "C" JNIEXPORT jboolean JNICALL
Java_com_margelo_nitro_skiayoga_SkiaYogaModule_nativeInstall(
    JNIEnv *env,
    jclass /*clazz*/,
    jlong jsRuntimePtr,
    jobject jRuntimeExecutor,
    jobject jCallInvokerHolder,
    jobject jPlatformContext) {
  auto *runtime = reinterpret_cast<jsi::Runtime *>(jsRuntimePtr);
  if (runtime == nullptr) {
    return JNI_FALSE;
  }

  auto jsCallInvoker = getCallInvoker(env, jCallInvokerHolder, jRuntimeExecutor);
  if (!jsCallInvoker) {
    return JNI_FALSE;
  }

  auto platformContext = jni::make_local(
      reinterpret_cast<RNSkia::JniPlatformContext::javaobject>(
               jPlatformContext));
  if (!platformContext) {
    return JNI_FALSE;
  }

  RNJsi::BaseRuntimeAwareCache::setMainJsRuntime(runtime);

  auto ctx = std::make_shared<RNSkia::RNSkAndroidPlatformContext>(
    platformContext->cthis(), jsCallInvoker);
  SetPlatformContext(ctx);

  return JNI_TRUE;
}

extern "C" JNIEXPORT void JNICALL
Java_com_margelo_nitro_skiayoga_SkiaYogaModule_nativeInvalidate(
    JNIEnv * /*env*/, jclass /*clazz*/) {
  SetPlatformContext(nullptr);
  RNJsi::BaseRuntimeAwareCache::setMainJsRuntime(nullptr);
}

} // namespace margelo::nitro::RNSkiaYoga

